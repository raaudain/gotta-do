{"ast":null,"code":"import _defineProperty from \"/Users/ramon/Documents/web-projects/todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/ramon/Documents/web-projects/todo-app/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport TodoList from \"./components/TodoList\";\nimport TodoForm from \"./components/TodoForm\";\nimport \"./css/Todo.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleItem = id => {\n      console.log(\"Item number: \".concat(id));\n      this.setState({\n        todos: this.state.todos.map(item => {\n          if (item.id === id) {\n            console.log(\"Completed: \".concat(!item.isDone)); // Shows value item should be once clicked.\n\n            return _objectSpread({}, item, {\n              // Spread operator flattens array\n              isDone: !item.isDone // If the \"id is equal, change the value from false to true\"\n\n            });\n          } else {\n            return item;\n          }\n        })\n      });\n    };\n\n    this.addItem = itemName => {\n      // Creates new item\n      const newItem = {\n        name: itemName,\n        id: Date.now(),\n        isDone: false\n      };\n      this.setState({\n        todos: [...this.state.todos, newItem] // Adds new item to the end of the Todos array.\n\n      });\n    };\n\n    this.clearCompleted = () => {\n      this.setState({\n        todos: this.state.todos.filter(item => !item.isDone) // Looking for uncompleted tasks\n\n      });\n    };\n\n    this.state = {\n      todos: []\n    };\n  }\n\n  componentDidMount() {\n    let storeItems = localStorage.getItem(\"storeItems\");\n\n    if (storeItems) {\n      storeItems = JSON.parse(storeItems);\n      console.log(storeItems);\n      this.setState({\n        todos: [...this.state.todos, storeItems]\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(\"storeItems\", JSON.stringify(this.state.todos));\n  } // Toggles item as FALSE or TRUE when clicked.\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Gotta-do List\"), React.createElement(TodoForm, {\n      addItem: this.addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(TodoList, {\n      todos: this.state.todos,\n      toggleItem: this.toggleItem,\n      clearCompleted: this.clearCompleted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ramon/Documents/web-projects/todo-app/src/App.js"],"names":["React","TodoList","TodoForm","App","Component","constructor","toggleItem","id","console","log","setState","todos","state","map","item","isDone","addItem","itemName","newItem","name","Date","now","clearCompleted","filter","componentDidMount","storeItems","localStorage","getItem","JSON","parse","componentDidUpdate","setItem","stringify","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TodoList from \"./components/TodoList\";\nimport TodoForm from \"./components/TodoForm\";\nimport \"./css/Todo.css\";\n\nclass App extends React.Component {\n  \n  constructor(){\n    super();\n    this.state = {\n      todos: []\n    }\n  }\n\n  componentDidMount(){\n    let storeItems = localStorage.getItem(\"storeItems\");\n\n    if(storeItems){\n        storeItems = JSON.parse(storeItems);\n        console.log(storeItems)\n\n        this.setState({\n            todos: [...this.state.todos, storeItems]\n        });\n    }\n  }\n\n  componentDidUpdate(){\n    localStorage.setItem(\"storeItems\", JSON.stringify(this.state.todos));\n  }\n\n  // Toggles item as FALSE or TRUE when clicked.\n  toggleItem = id => {\n    console.log(`Item number: ${id}`);\n    this.setState({\n      todos: this.state.todos.map(item => {\n        if(item.id === id){\n          console.log(`Completed: ${!item.isDone}`); // Shows value item should be once clicked.\n          return{\n            ...item,  // Spread operator flattens array\n            isDone: !item.isDone // If the \"id is equal, change the value from false to true\"\n          };\n        }\n        else{\n          return item;\n        }\n      })\n    });\n  }\n\n  addItem = itemName => {\n    // Creates new item\n    const newItem = {\n      name: itemName,\n      id: Date.now(),\n      isDone: false\n    };\n    this.setState({\n      todos: [...this.state.todos, newItem] // Adds new item to the end of the Todos array.\n\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState({\n      todos: this.state.todos.filter(item => !item.isDone) // Looking for uncompleted tasks\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h2>Gotta-do List</h2>\n        <TodoForm \n          addItem={this.addItem} \n        />\n      \n        <TodoList\n          todos={this.state.todos}\n          toggleItem={this.toggleItem}\n          clearCompleted={this.clearCompleted}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}